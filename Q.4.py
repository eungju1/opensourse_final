def solution(r1, r2):
    # 두 원의 중심 사이의 거리 계산
    distance = ((0 - 0) ** 2 + (0 - 0) ** 2) ** 0.5  # (**은 제곱을 의미하고 ** 0.5는 제곱근(루트)을 의미하고 
    #윗 식은 피타고라스 정리를 이용한거고 원의 중심이라고 문제에 나와있기에 ((x1 - x2)^2+(y2 - y1)^2 )^0.5)를 이용했습니다.

    # 두 원이 겹치는 경우
    if distance < r1 + r2:
        min_r = min(r1, r2) #r1, r2중 작은값 저장
        max_r = max(r1, r2) #r1, r2중 큰값 저장
        count = 0
        
        for x in range(-max_r, max_r + 1): # x좌표를 나타내며, 두 원의 중심으로부터 x좌표가 될 수 있는 범위지정합니다.
            for y in range(-max_r, max_r + 1): # y좌표를 나타내며, 두 원의 중심으로부터 y좌표가 될 수 있는 범위지정합니다.
                if x ** 2 + y ** 2 >= min_r ** 2 and x ** 2 + y ** 2 <= max_r ** 2: #윗 피타고라스 식을 통하여 ^2 + y^2가 각 원의 사이에 있는지 확인합니다.
                    count += 1 #원 사이에 존재한다면 count +=1를 통해 갯수를 증가 시킵니다.
        return count

    else:     # 만약에 두 원이 겹치지 않는 경우 return =0룰 통하여 출력이 0이 나오게 합니다.
        return 0

# Q.4
r1 = 1
r2 = 5
result = solution(r1, r2)
print(result)  # 두 원 사이의 공간에 존재하는 정수 좌표의 개수 출력 = (r1 =1 r2=5로 했을 시 80이 출력됩니다.)
